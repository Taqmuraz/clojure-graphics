(require 'rotating-triangle.core)
(-main)
(main)
(:main)
exit
(require 'rotating-triangle.core)
(-main)
(require 'rotating-triangle.core)
(-main)
exit
(require 'rotating-triangle.core)
exit
(require 'rotating-triangle.core)
(-main)
(require 'rotating-triangle.core)
(-main)
exit
(require 'rotating-triangle.core)
(q/defsketch rotating-triangle
  :size [300 300]
  :setup setup
  :draw draw)
(ns rotating-triangle.core
  (:require [quil.core :as q]))
(q/defsketch rotating-triangle
  :size [300 300]
  :setup setup
  :draw draw)
clear
(draw)
draw
rotating-triangle.core/draw
rotating-triangle.core.draw
rotating-triangle.core/draw
clear
exi
exit
(require 'rotating-triangle.core)
(-main)
exit
(require '[rotating-triangle.core :as r])
(r/main)
r
(require '[rotating-triangle.core :as r])
(load-file "src/rotating-triangle/core.clj")
exit
(load-file "src/rotating-triangle/core.clj")
exit
(require 'linear.vector-xy)
(add [1 1] [2 2])
(require 'linear.vector-xy :as xy)
(ns test (:require [linear.vector-xy :as xy]))
(xy/add [1 1] [2 2])
(xy/add [1 2] [3 4])
exit
(ns test (:require [linear.vector-xy :as xy]))
(xy/len [1 2])
(xy/len [1 0])
(xy/dot [1 0] [1 0])
(xy/dot [1 0] [0 1])
exit
(ns test (:require [linear.vector-xy :as xy]))
(xy/dot [1 0] [0 1])
(xy/dot [1 0] [1 0])
exit
